■値渡しと参照渡しの違い

・値渡し
　関数の引数を、ポインタではない状態で渡すこと。

　例
　int a = 10;
  function(a);

  void function(int a) {
      a++;
  }

  このとき、メモリ上ではこうなってます。

     アドレス       値
  +------------+  +----+
  | 0x00000000 |  | 10 | ＜＜変数 a の値   
  +------------+  +----+
  ・・・
  +------------+  +----+
  | 0x00001000 |  | 10 | ＜＜関数 function のパラメータ a の値   
  +------------+  +----+

  関数が実行された時点で、別のメモリ領域に変数aの値がコピーされます。
  よって、関数が実行を終えると

     アドレス       値
  +------------+  +----+
  | 0x00000000 |  | 10 | ＜＜変数 a の値   
  +------------+  +----+
  ・・・
  +------------+  +----+
  | 0x00001000 |  | 11 | ＜＜関数 function のパラメータ a の値   
  +------------+  +----+

  0x00001000番地のデータだけが書き換わって、戻っていきます。
  当然、function()を呼んだあとに、aの値をpintf()しても、10が出力されます。

・参照渡し
　関数の引数に、アドレスを渡すこと

　先程の関数の引数を、ポインタにします
　
  例
　int a = 10;
  function(&a);

  void function(int* a) {
      (*a)++;
  }

  このとき、メモリ上ではこうなってます。

     アドレス       値
  +------------+  +----+
  | 0x00000000 |  | 10 | ＜＜変数 a の値   
  +------------+  +----+

  関数が実行されても、メモリ上に変数 a の値はコピーされず、
  関数には「0x00000000」というアドレスが渡ります。

　関数が実行を終えると

     アドレス       値
  +------------+  +----+
  | 0x00000000 |  | 11 | ＜＜変数 a の値   
  +------------+  +----+

  アドレス0x00000000 のデータに対して編集しているので、
  変数 a の値が書き換わります。

  よって、function()を呼んだあとに、aの値をpintf()すると、11が出力されます。



